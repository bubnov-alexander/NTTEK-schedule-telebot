from settings import *
from parser import *
import pytz,requests,json,time,random
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton, ReplyKeyboardMarkup

tz = pytz.timezone('Asia/Yekaterinburg')
page = 1
predmeti = ['–¢–µ–æ—Ä–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π', '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –ò–°', '–û–° –∏ —Å—Ä–µ–¥—ã ', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–û–ë–ñ']



#–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
#argument1.chat.id
#argument2.from_user
def menu(bot, argument1, argument2):
    markup=ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = KeyboardButton("üìã–ü–∞—Ä—ãüìã")
    item2 = KeyboardButton("üë•–ü—Ä–µ–ø–æ–¥—ãüë•")
    item3 = KeyboardButton("üë¨–°—Ç—É–¥–µ–Ω—Ç—ã –≥—Ä—É–ø–ø—ãüë¨")
    item4 = KeyboardButton("üìñ–î–óüìñ")
    item5 = KeyboardButton("üìí–û –±–æ—Ç–µüìí")
    cursor.execute('''SELECT user_id FROM admin WHERE user_id = ?''', (argument1.chat.id, ))
    admin = cursor.fetchone()
    if argument1.chat.id not in admin:
        markup.add(item1, item2, item3, item4, item5)
        bot.send_message(argument1.chat.id, '–í—ã–±–µ—Ä–∏ —Ç–æ, –≤–æ—Ç —á—Ç–æ —è –º–æ–≥—É —Ç–µ–±–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å: '.format(argument2.from_user),  parse_mode='html', reply_markup=markup)
    else:
        item6 = KeyboardButton("Admin panel")
        markup.add(item1, item2, item3, item4, item5, item6)
        bot.send_message(argument1.chat.id, '–í—ã–±–µ—Ä–∏ —Ç–æ, –≤–æ—Ç —á—Ç–æ —è –º–æ–≥—É —Ç–µ–±–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å: '.format(argument2.from_user),  parse_mode='html', reply_markup=markup)
        
#–ü–∞—Ä—ã
def group(bot, message):
    markup = InlineKeyboardMarkup(row_width=3)
    item1 = InlineKeyboardButton(text = "2–ò–°6", callback_data = '2–ò–°6')
    item2 = InlineKeyboardButton(text = "2–ü–°–û12", callback_data = "2pso12")
    item3 = InlineKeyboardButton(text = "2–†5", callback_data = "2r5")
    item4 = InlineKeyboardButton(text = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä–∞", callback_data = "teacher")
    item5 = InlineKeyboardButton(text = "üîî–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤", callback_data = 'bells')
    back = InlineKeyboardButton(text = "üîô–ù–∞–∑–∞–¥", callback_data = 'back')
    markup.add(item1, item2, item3, item4, back)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∫–æ–π –≥—Ä—É–ø–ø—ã —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å: ',  parse_mode='html', reply_markup=markup)

def adminpanel(bot, argument1, argument2):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = KeyboardButton('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')
    item2 = KeyboardButton('–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞')
    back = KeyboardButton('üîô–ù–∞–∑–∞–¥')
    markup.add(item1, item2, back)
    bot.send_message(argument1.chat.id, '–í—ã–±–µ—Ä–∏ —á—Ç–æ-—Ç–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ: ', parse_mode = 'html', reply_markup = markup)

#–í–´–ë–û–† –†–ê–°–ü–ò–°–ê–ù–ò–Ø
def parimiy(InlineKeyboardMarkup, InlineKeyboardButton, bot, callback, group, who):
    keyboard = InlineKeyboardMarkup()
    keyboard.row_width = 2
    site = requests.get(f'https://erp.nttek.ru/api/schedule/legacy').text
    sitedate = json.loads(site)
    sitedate.sort(key=lambda x: time.mktime(time.strptime(x,"%d.%m.%Y")))
    for i in range(0, len(sitedate)):
        keyboard.add (InlineKeyboardButton(f'{sitedate[i]} {who}', callback_data = f'{sitedate[i]} {who}'))
    bot.send_message(callback.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', parse_mode='html', reply_markup = keyboard)

#–ü–†–ï–ü–û–î–´
def prepod(bot, message):
    f = open('data/Prepod.txt', 'r', encoding='UTF-8')
    thinks  = f.read()
    f.close()
    bot.send_message(message.chat.id, thinks, parse_mode='html')

#–ó–í–û–ù–ö–ò
def zvonok(bot, callback):
    photo = open('data/photo.jpg', 'rb')
    markup_inline = InlineKeyboardMarkup()
    url1 = InlineKeyboardButton (text = 'üìÖ–ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µüìÖ', url=f'https://a.nttek.ru')
    markup_inline.add(url1)
    bot.send_photo(callback.message.chat.id, photo, reply_markup=markup_inline)

#–°–¢–£–î–ï–ù–¢–´
def groupstudents(bot, message):
    f = open('data/Student.txt', 'r', encoding='UTF-8')
    facts = f.read()
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = KeyboardButton("üîÅ–†–∞–Ω–¥–æ–º–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞üîÅ")
    back = KeyboardButton("üîô–ù–∞–∑–∞–¥")
    markup.add(item1, back)
    bot.send_message(message.chat.id, facts, parse_mode='html', reply_markup=markup)
    f.close()

#–†–ê–ù–î–û–ú
def myrandom(bot, message):
    file = open('data/Student.txt', 'r', encoding='UTF-8')
    lines = []
    for line in file:
        lines.append(line)
    random_line = random.choice(lines)
    file.close()
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    bot.send_message(message.chat.id, random_line, parse_mode='html', reply_markup=markup)

#–û –ë–û–¢–ï
def aboutbot(bot, message):
    f = open('data/About bot.txt', 'r', encoding='UTF-8')
    facts = f.read()
    markup_inline = InlineKeyboardMarkup()
    url1 = InlineKeyboardButton (text = '–í–∫', url='https://vk.com/mem445')
    url2 = InlineKeyboardButton (text = '–¢–µ–ª–µ–≥—Ä–∞–º–º', url= 'https://t.me/Kinoki445')
    url3 = InlineKeyboardButton (text = '–í–∫ –∫—É—Ä–∞—Ç–æ—Ä–∞ –≥—Ä—É–ø–ø—ã', url= 'https://vk.com/id31107453')
    markup_inline.add(url1,url2, url3)
    bot.send_message(message.chat.id, facts, parse_mode='html', reply_markup=markup_inline)
    f.close()

def error(bot, e):
    bot.send_message(chat_id = 510441193, text = f'–í –±–æ—Ç–µ –ø–æ—è–≤–∏–ª–∞—Å—å –æ—à–∏–±–∫–∞: \n{e}', parse_mode='html')

#–î–ó
def homework(bot, message, InlineKeyboardMarkup, InlineKeyboardButton):
    try:
        cursor.execute('''SELECT user_id FROM homeworker WHERE user_id = ?''', (message.chat.id, ))
        homeworker = cursor.fetchall()[0]
        if message.chat.id not in homeworker:
            markup = InlineKeyboardMarkup()
            para = InlineKeyboardButton(text = '–í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç ', callback_data='dz')
            markup.add(para, row_width = 3)
            bot.send_message(message.chat.id, text = '–í—ã–±–µ—Ä–∏ —á—Ç–æ-—Ç–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ: ', parse_mode='html', reply_markup=markup)
        else:
            markup = InlineKeyboardMarkup()
            para = InlineKeyboardButton(text = '–í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç ', callback_data='dz')
            hw = InlineKeyboardButton(text = '–î–æ–±–∞–≤–∏—Ç—å –î–ó', callback_data= 'addhw')
            markup.add(para,hw, row_width = 3)
            bot.send_message(message.chat.id, text = '–í—ã–±–µ—Ä–∏ —á—Ç–æ-—Ç–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ: ', parse_mode='html', reply_markup=markup)
    except:
        markup = InlineKeyboardMarkup()
        para = InlineKeyboardButton(text = '–í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç ', callback_data='dz')
        hw = InlineKeyboardButton(text = '–î–æ–±–∞–≤–∏—Ç—å –î–ó', callback_data= 'addhw')
        markup.add(para,hw, row_width = 3)
        bot.send_message(message.chat.id, text = '–í—ã–±–µ—Ä–∏ —á—Ç–æ-—Ç–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ: ', parse_mode='html', reply_markup=markup)


#–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
def defuser(bot, message, InlineKeyboardMarkup, InlineKeyboardButton):
    cursor.execute('''SELECT user_id FROM admin WHERE user_id = ?''', (message.chat.id, ))
    admin = cursor.fetchall()[0]
    if message.chat.id not in admin:
         bot.send_message(message.chat.id, f'–£ —Ç–µ–±—è –Ω–µ—Ç—É –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥–µ', parse_mode='html')
         menu(bot, message, message)
    else:
        cursor.execute('''SELECT * FROM users''')
        global user
        user = cursor.fetchall()
        global page
        markup = InlineKeyboardMarkup()
        markup.row_width = 1
        max = page * 5
        min = max - 5
        a = 0
        b = 0
        if page == 0:
            page = page + 1

        for i in user[min:max:]:
            string = str(i[3])
            markup.add (InlineKeyboardButton(text = f'{i[0]} | {string}', callback_data = string))
            a = a + 1
            b = b + a
        if page == 1:
            amount_plus = InlineKeyboardButton(text = '–í–ø–µ—Ä—ë–¥ -->', callback_data = '+1')
            close = InlineKeyboardButton(text = '–ó–∞–∫—Ä—ã—Ç—å', callback_data='close')
            markup.add (close, amount_plus, row_width = 2)
            bot.send_message (message.chat.id, text = f'**–°–ø–∏—Å–æ–∫ {page}**', parse_mode='markdown', reply_markup = markup)

        elif a < 5:
            amount_minus = InlineKeyboardButton(text = '<-- –ù–∞–∑–∞–¥', callback_data = '-1')
            close = InlineKeyboardButton(text = '–ó–∞–∫—Ä—ã—Ç—å', callback_data='close')
            markup.add(amount_minus, close, row_width = 2)
            bot.send_message (message.chat.id, text = f'**–°–ø–∏—Å–æ–∫ {page}**', parse_mode='markdown', reply_markup = markup)

        else:
            amount_minus = InlineKeyboardButton(text = '<-- –ù–∞–∑–∞–¥', callback_data = '-1')
            amount_plus = InlineKeyboardButton(text = '–í–ø–µ—Ä—ë–¥ -->', callback_data = '+1')
            close = InlineKeyboardButton(text = '–ó–∞–∫—Ä—ã—Ç—å', callback_data='close')
            markup.add (amount_minus, close, amount_plus, row_width = 3)
            bot.send_message (message.chat.id, text = f'**–°–ø–∏—Å–æ–∫ {page}**', parse_mode='markdown', reply_markup = markup)

#–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è callback
def defuser2(bot, callback, InlineKeyboardMarkup, InlineKeyboardButton):
    cursor.execute('''SELECT * FROM users''')
    global user
    user = cursor.fetchall()
    global page
    markup = InlineKeyboardMarkup()
    markup.row_width = 1
    max = page * 5
    min = max - 5
    a = 0
    if page == 0:
            page = page + 1

    for i in user[min:max:]:
        string = str(i[3])
        markup.add (InlineKeyboardButton(text = f'{i[0]} | {string}', callback_data = string))
        a = a + 1

    if page == 1:
        amount_plus = InlineKeyboardButton(text = '–í–ø–µ—Ä—ë–¥ -->', callback_data = '+1')
        close = InlineKeyboardButton(text = '–ó–∞–∫—Ä—ã—Ç—å', callback_data='close')
        markup.add (close, amount_plus, row_width = 2)
        bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id, text = f'**–°–ø–∏—Å–æ–∫ {page}**', parse_mode='markdown', reply_markup = markup)

    elif a < 5:
        amount_minus = InlineKeyboardButton(text = '<-- –ù–∞–∑–∞–¥', callback_data = '-1')
        close = InlineKeyboardButton(text = '–ó–∞–∫—Ä—ã—Ç—å', callback_data='close')
        markup.add(amount_minus, close, row_width = 2)
        bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id, text = f'**–°–ø–∏—Å–æ–∫ {page}**', parse_mode='markdown', reply_markup = markup)

    else:
        amount_minus = InlineKeyboardButton(text = '<-- –ù–∞–∑–∞–¥', callback_data = '-1')
        amount_plus = InlineKeyboardButton(text = '–í–ø–µ—Ä—ë–¥ -->', callback_data = '+1')
        close = InlineKeyboardButton(text = '–ó–∞–∫—Ä—ã—Ç—å', callback_data='close')
        markup.add (amount_minus, close, amount_plus, row_width = 3)
        bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id, text = f'**–°–ø–∏—Å–æ–∫ {page}**', parse_mode='markdown', reply_markup = markup)

def root(bot, argument1, argument2):
    markup = InlineKeyboardMarkup(row_width=4)
    item1 = InlineKeyboardButton(text = '2–†5', callback_data = '2r5base')
    item2 = InlineKeyboardButton(text = 'BAN', callback_data = 'banbase')
    item3 = InlineKeyboardButton(text = '–î–ó', callback_data = 'dzbase')
    item4 = InlineKeyboardButton(text = 'admin', callback_data = 'adminbase')
    back = InlineKeyboardButton(text = 'üîô–ù–∞–∑–∞–¥', callback_data='close')
    markup.add(item1, item2, item3, item4, back)
    bot.send_message(argument1.chat.id, text = '–í—ã–±–µ—Ä–∏ —á—Ç–æ-—Ç–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ:  ', parse_mode='html', reply_markup=markup)



# callback
def mycallback(bot, callback):
    site = requests.get(f'https://erp.nttek.ru/api/schedule/legacy').text
    sitedate = json.loads(site)
    sitedate.sort(key=lambda x: time.mktime(time.strptime(x,"%d.%m.%Y")))

    if callback.data == '2–ò–°6':
        parimiy(InlineKeyboardMarkup, InlineKeyboardButton, bot, callback, 'group', '2–ò–°6')
        print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.message.chat.username} {callback.message.chat.first_name} –∑–∞–ø—Ä–æ—Å–∏–ª 2is6! –í', (datetime.datetime.now(tz).strftime('%H:%M:%S')))
    for i in range(0, len(sitedate)):
        if callback.data == (f'{sitedate[i]} 2–ò–°6'):
            getpari(sitedate[i], 'group', "2–ò–°6", InlineKeyboardMarkup, InlineKeyboardButton, bot, callback)

    if callback.data == '2r5':
            parimiy(InlineKeyboardMarkup, InlineKeyboardButton, bot, callback, 'group', '2–†5')
            print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.message.chat.username} {callback.message.chat.first_name} –∑–∞–ø—Ä–æ—Å–∏–ª 2–†5! –í', (datetime.datetime.now(tz).strftime('%H:%M:%S')))
    for i in range(0, len(sitedate)):
        if callback.data == (f'{sitedate[i]} 2–†5'):
            getpari(sitedate[i], 'group', "2–†5", InlineKeyboardMarkup, InlineKeyboardButton, bot, callback)

    if callback.data == '2pso12':
            parimiy(InlineKeyboardMarkup, InlineKeyboardButton, bot, callback, 'group', '2–ü–°–û12')
            print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.message.chat.username} {callback.message.chat.first_name} –∑–∞–ø—Ä–æ—Å–∏–ª 2–ü–°–û12! –í', (datetime.datetime.now(tz).strftime('%H:%M:%S')))
    for i in range(0, len(sitedate)):
        if callback.data == (f'{sitedate[i]} 2–ü–°–û12'):
            getpari(sitedate[i], 'group', "2–ü–°–û12", InlineKeyboardMarkup, InlineKeyboardButton, bot, callback)
                

    if callback.data == 'teacher':
        pass
    #     parimiy(InlineKeyboardMarkup, InlineKeyboardButton, bot, callback, 'teacher', '–ó—è—Ç–∏–∫–æ–≤–∞ –¢–Æ')
    #     print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.message.chat.username} {callback.message.chat.first_name} –∑–∞–ø—Ä–æ—Å–∏–ª –ó—è—Ç–∏–∫–æ–≤–∞ –¢–Æ! –í', (datetime.datetime.now(tz).strftime('%H:%M:%S')))
    # for i in range(0, len(sitedate)):
    #     if callback.data == (f'{sitedate[i]} –ó—è—Ç–∏–∫–æ–≤–∞ –¢–Æ'):
    #         getpari(sitedate[i], 'teacher', "–ó—è—Ç–∏–∫–æ–≤–∞ –¢–Æ", InlineKeyboardMarkup, InlineKeyboardButton, bot, callback)
    
    elif callback.data == '2r5base':
        markup = InlineKeyboardMarkup()
        add_user = InlineKeyboardButton(text = 'Adduser', callback_data= 'adduser_tworfive')
        close = InlineKeyboardButton(text = 'üîô–í—ã–π—Ç–∏', callback_data= 'close')
        delete_user = InlineKeyboardButton(text = 'Deleteuser', callback_data= 'deleteuser_tworfive')
        cursor.execute('''SELECT user_id FROM tworfive ''')
        tworfive = cursor.fetchall()
        for i in range(0, len(tworfive)):
            markup.add(InlineKeyboardButton(str(tworfive[i]), callback_data = f'{tworfive[i]}'))
        markup.add(add_user, close, delete_user, row_width = 3)
        bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id, text = f'–í—ã–±–µ—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ', parse_mode='markdown', reply_markup = markup)

    elif callback.data == 'adduser_tworfive':
        bot.reply_to(callback.message, '–í–≤–µ–¥–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ')
        def addusertwofive(message):
            tworfive.append(message.text)
            bot.send_message(callback.message.chat.id, f'–Ø –¥–æ–±–∞–≤–∏–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {message.text}', parse_mode='html')
        bot.register_next_step_handler(callback.message, addusertwofive)
        

    elif callback.data == 'bells':
        zvonok(bot, callback)

    elif callback.data == 'close':
        menu(bot, callback.message, callback)

    elif callback.data == '+1':
        global page 
        page += 1
        defuser2(bot, callback, InlineKeyboardMarkup, InlineKeyboardButton)

    elif callback.data == '-1': 
        page -= 1
        defuser2(bot, callback, InlineKeyboardMarkup, InlineKeyboardButton)

    elif callback.data == 'dz':
        markup = InlineKeyboardMarkup()
        close = InlineKeyboardButton(text = 'üîô–í—ã–π—Ç–∏', callback_data= 'close')
        for i in range(0, len(predmeti)):
            markup.add(InlineKeyboardButton(predmeti[i], callback_data = f'{predmeti[i]}DZ'))
        markup.add(close)
        bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id, text = f'–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç: ', parse_mode='markdown', reply_markup = markup)

    elif callback.data == 'addhw':
        markup = InlineKeyboardMarkup()
        close = InlineKeyboardButton(text = 'üîô–í—ã–π—Ç–∏', callback_data= 'close')
        for i in range(0, len(predmeti)):
            markup.add(InlineKeyboardButton(predmeti[i], callback_data = f'{predmeti[i]}HW'))
        markup.add(close)
        bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id, text = f'–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç: ', parse_mode='markdown', reply_markup = markup)


    for i in range(0, len(predmeti)):
        if callback.data == (f"{predmeti[i]}HW"):
            para = predmeti[i]
            bot.reply_to(callback.message, f'–ù–∞–ø–∏—à–∏ –î–ó –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–¥–∞–ª–∏ –ø–æ {para}', parse_mode='markdown') 
        
            def writehomework(message):
                text = message.text
                f = open(f'data/homework/{para}.txt', 'a+', encoding='UTF-8')
                date = datetime.datetime.now(tz).strftime('%d.%m.%Y')
                f.write(f'–ó–∞–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–Ω–æ–µ {date} —á–∏—Å–ª–∞:\n{text}\n\n')
                f.close
                bot.reply_to(message, f'–ó–∞–¥–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ —è –¥–æ–±–∞–≤–∏–ª –≤ –ë–∞–∑—É –î–∞–Ω–Ω—ã—Ö:\n\n{message.text}\n', parse_mode='markdown')
                homework(bot, message, InlineKeyboardMarkup, InlineKeyboardButton)
                bot.send_message(chat_id = 510441193, text = f'–î–æ–±–∞–≤–∏–ª –Ω–æ–≤–æ–µ –î–ó! –í {para} {message.from_user.username}, {message.from_user.first_name}', parse_mode='Markdown')
                print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.message.chat.username} {callback.message.chat.first_name} –∏–∑–º–µ–Ω–∏–ª –î–ó! –í {para}', (datetime.datetime.now(tz).strftime('%H:%M:%S')))
            bot.register_next_step_handler(callback.message, writehomework)

        if callback.data == (f'{predmeti[i]}DZ'):
            para = predmeti[i]
            try:
                f = open(f'data/homework/{para}.txt', 'r+', encoding='UTF-8')
                text = f.read()
                bot.send_message(callback.message.chat.id, text, parse_mode='markdown')
                f.close
            except:
                bot.send_message(callback.message.chat.id, f'–î–∑ –ø–æ {para} –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç—É!', parse_mode='markdown')
            
    cursor.execute('''SELECT * FROM users''')
    user = cursor.fetchall()
    for i in user:
        if callback.data == i[3]:
            bot.send_message(callback.message.chat.id, text = 
            (
            f'–ù–æ–º–µ—Ä: {str(i[0])}\n'
            f'–ò–º—è: {str(i[2])}\n'
            f'Nickname: {str(i[3])}\n'
            f'Regist: {str(i[4])}\n'
            )
            , parse_mode='markdown')