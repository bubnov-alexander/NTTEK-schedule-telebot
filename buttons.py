from settings import cursor, database
from parser_1 import getpari
from openAI import send_openai
import pytz,requests,json,time,random, datetime as dt
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

tz = pytz.timezone('Asia/Yekaterinburg')
page = 1
predmeti = ['–¢–µ–æ—Ä–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π', '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –ò–°', '–û–° –∏ —Å—Ä–µ–¥—ã ', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–û–ë–ñ']

#–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
def menu(bot, callback):
    
    markup=InlineKeyboardMarkup(row_width=3)
    item1 = InlineKeyboardButton(text = "üìã–†–∞—Å–ø–∏—Å–∞–Ω–∏–µüìã", callback_data = "üìã–†–∞—Å–ø–∏—Å–∞–Ω–∏–µüìã")
    item2 = InlineKeyboardButton(text = "üë•–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏üë•", callback_data = "üë•–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏üë•")
    item3 = InlineKeyboardButton(text = "üõ†–ù–∞—Å—Ç—Ä–æ–π–∫–∏üõ†", callback_data = "üõ†–ù–∞—Å—Ç—Ä–æ–π–∫–∏üõ†")
    item5 = InlineKeyboardButton(text = "üìí–û –±–æ—Ç–µüìí", callback_data = "üìí–û –±–æ—Ç–µüìí")
    cursor.execute('''SELECT user_id FROM admin WHERE user_id = ?''', (callback.chat.id, ))
    admin = 510441193
    if callback.chat.id != admin:
        markup.add(item1, item2, item3,item5)
        try:
            bot.edit_message_text(chat_id=callback.chat.id, message_id=callback.id, text = '–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å: '.format(callback.from_user),  parse_mode='html', reply_markup=markup)
        except:
            bot.send_message(callback.chat.id, '–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å: '.format(callback.from_user),  parse_mode='html', reply_markup=markup)
    else:
        item6 = InlineKeyboardButton("Admin panel", callback_data = "Admin panel")
        markup.add(item1, item2, item3,item5, item6)
        try:
            bot.edit_message_text(chat_id=callback.chat.id, message_id=callback.id, text = '–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å: '.format(callback.from_user),  parse_mode='html', reply_markup=markup)

        except:
            bot.send_message(callback.chat.id, '–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å: '.format(callback.from_user),  parse_mode='html', reply_markup=markup)

def group(bot,callback):
    markup = InlineKeyboardMarkup(row_width=3)
    item1 = InlineKeyboardButton(text = "–ú–æ—è –≥—Ä—É–ø–ø–∞", callback_data = 'f_group')
    item7 = InlineKeyboardButton(text = "Excel", callback_data = "excel")
    item5 = InlineKeyboardButton(text = "–°–∞–π—Ç —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º", url = 'https://a.nttek.ru/')
    item4 = InlineKeyboardButton(text = "üîî–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤", callback_data = 'bells')
    item6 = InlineKeyboardButton(text = "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", callback_data = 'teacher')
    item8 = InlineKeyboardButton(text = "–î—Ä—É–≥–∞—è –≥—Ä—É–ø–ø–∞", callback_data = 'another_group')
    back = InlineKeyboardButton(text = 'üîô–ù–∞–∑–∞–¥', callback_data = 'close')
    markup.add(item1, item7, item8, item6)
    markup.add(item4, item5)
    markup.add(back)
    try:
        bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id, text = '–í—ã–±–µ—Ä–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∫–æ–π –≥—Ä—É–ø–ø—ã —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å: ',  parse_mode='html', reply_markup=markup)
    except:
        bot.send_message(callback.message.chat.id, '–í—ã–±–µ—Ä–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∫–æ–π –≥—Ä—É–ø–ø—ã —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å: ',  parse_mode='html', reply_markup=markup)

#–í–´–í–û–î –†–ê–°–ü–ò–°–ê–ù–ò–Ø
def parimiy(InlineKeyboardMarkup, InlineKeyboardButton, bot, callback, group, who):
    keyboard = InlineKeyboardMarkup()
    keyboard.row_width = 3
    site = requests.get(f'https://erp.nttek.ru/api/schedule/legacy').text
    sitedate = json.loads(site)
    sitedate.sort(key=lambda x: time.mktime(time.strptime(x,"%d.%m.%Y")))

    if (len(sitedate)) <= 5:
        a = 0
    else:
        a = ((len(sitedate)) - 5)

    if group == 'group':
        for i in range(a, len(sitedate)):
            date1 = int(dt.datetime.weekday(dt.datetime.strptime(sitedate[i].replace('.','-'), '%d-%m-%Y')))
            date2 = ''

            if date1 > 2:
                if date1 == 3:
                    date2 = ('–ß–µ—Ç–≤–µ—Ä–≥')
                elif date1 == 4:
                    date2 = ('–ü—è—Ç–Ω–∏—Ü–∞')
                elif date1 == 5:
                    date2 = ('–°—É–±–±–æ—Ç–∞')
            elif date1 < 2:
                if date1 == 1:
                    date2 = ('–í—Ç–æ—Ä–Ω–∏–∫')
                elif date1 == 0:
                    date2 = ('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫')
            else:
                date2 = ('–°—Ä–µ–¥–∞')

            keyboard.add (InlineKeyboardButton(f'{sitedate[i]} ({date2})', callback_data = f'{sitedate[i], who}'))
        item1 = (InlineKeyboardButton('–î—Ä—É–≥–∏–µ –≥—Ä—É–ø–ø—ã', callback_data = 'another_group'))
        item3 = (InlineKeyboardButton('–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏', callback_data = 'teacher'))
        item2 = (InlineKeyboardButton('–¢–≤–æ—è –≥—Ä—É–ø–ø–∞', callback_data = 'f_group'))
        close = (InlineKeyboardButton('–ú–µ–Ω—é', callback_data = 'close2'))
        keyboard.add(item1, item3, item2)
        keyboard.add(close)
        try:
            bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id, text = f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n–≥—Ä—É–ø–ø—ã {who}', parse_mode='html', reply_markup = keyboard)
        except:
            bot.send_message(callback.message.chat.id, f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n–≥—Ä—É–ø–ø—ã {who}', parse_mode='html', reply_markup = keyboard)

    elif group == 'teacher':
        for i in range(a, len(sitedate)):
            date1 = int(dt.datetime.weekday(dt.datetime.strptime(sitedate[i].replace('.','-'), '%d-%m-%Y')))
            date2 = ''

            if date1 > 2:
                if date1 == 3:
                    date2 = ('–ß–µ—Ç–≤–µ—Ä–≥')
                elif date1 == 4:
                    date2 = ('–ü—è—Ç–Ω–∏—Ü–∞')
                elif date1 == 5:
                    date2 = ('–°—É–±–±–æ—Ç–∞')
            elif date1 < 2:
                if date1 == 1:
                    date2 = ('–í—Ç–æ—Ä–Ω–∏–∫')
                elif date1 == 0:
                    date2 = ('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫')
            else:
                date2 = ('–°—Ä–µ–¥–∞')
            keyboard.add (InlineKeyboardButton(f'{sitedate[i]} ({date2})', callback_data = f'–ø—Ä–µ–ø–æ–¥{sitedate[i], who}'))
        item1 = (InlineKeyboardButton('–î—Ä—É–≥–∏–µ –≥—Ä—É–ø–ø—ã', callback_data = 'another_group'))
        item3 = (InlineKeyboardButton('–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏', callback_data = 'teacher'))
        item2 = (InlineKeyboardButton('–¢–≤–æ—è –≥—Ä—É–ø–ø–∞', callback_data = 'f_group'))
        close = (InlineKeyboardButton('–ú–µ–Ω—é', callback_data = 'close2'))
        keyboard.add(item1, item3, item2)
        keyboard.add(close)
        try:
            bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id, text = f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {who}', parse_mode='html', reply_markup = keyboard)
        except:
            bot.send_message(callback.message.chat.id, f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {who}', parse_mode='html', reply_markup = keyboard)

    elif group == 'excel':
        for i in range(a, len(sitedate)):
            date1 = int(dt.datetime.weekday(dt.datetime.strptime(sitedate[i].replace('.','-'), '%d-%m-%Y')))
            date2 = ''

            if date1 > 2:
                if date1 == 3:
                    date2 = ('–ß–µ—Ç–≤–µ—Ä–≥')
                elif date1 == 4:
                    date2 = ('–ü—è—Ç–Ω–∏—Ü–∞')
                elif date1 == 5:
                    date2 = ('–°—É–±–±–æ—Ç–∞')
            elif date1 < 2:
                if date1 == 1:
                    date2 = ('–í—Ç–æ—Ä–Ω–∏–∫')
                elif date1 == 0:
                    date2 = ('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫')
            else:
                date2 = ('–°—Ä–µ–¥–∞')
            keyboard.add (InlineKeyboardButton(f'{sitedate[i]} ({date2})', callback_data = f'excel {sitedate[i]}'))
        item1 = (InlineKeyboardButton('–î—Ä—É–≥–∏–µ –≥—Ä—É–ø–ø—ã', callback_data = 'another_group'))
        item3 = (InlineKeyboardButton('–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏', callback_data = 'teacher'))
        item2 = (InlineKeyboardButton('–¢–≤–æ—è –≥—Ä—É–ø–ø–∞', callback_data = 'f_group'))
        close = (InlineKeyboardButton('–ú–µ–Ω—é', callback_data = 'close2'))
        keyboard.add(item1, item3, item2)
        keyboard.add(close)
        try:
            bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id, text = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', parse_mode='html', reply_markup = keyboard)
        except:
            bot.send_message(callback.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', parse_mode='html', reply_markup = keyboard)

#–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
def defuser(bot, message, InlineKeyboardMarkup, InlineKeyboardButton):
    cursor.execute('''SELECT user_id FROM admin WHERE user_id = ?''', (message.chat.id, ))
    admin = 510441193
    if message.chat.id != admin:
        bot.send_message(message.chat.id, f'–£ —Ç–µ–±—è –Ω–µ—Ç—É –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥–µ', parse_mode='html')
        menu(bot, message)
    else:
        cursor.execute('''SELECT * FROM users''')
        global user
        user = cursor.fetchall()
        global page
        markup = InlineKeyboardMarkup()
        back = InlineKeyboardButton(text = 'üîô–ù–∞–∑–∞–¥', callback_data = 'close')
        markup.row_width = 1
        max = page * 10
        min = max - 10
        a = 0
        b = 0
        if page == 0:
            page = page + 1

        for i in user[min:max:]:
            string = str(i[3])
            if string != 'None':
                markup.add (InlineKeyboardButton(text = f'{i[0]} | {string}', callback_data = string))
                a = a + 1
                b = b + a
            else:
                string = str(i[2])
                markup.add (InlineKeyboardButton(text = f'{i[0]} | {string}', callback_data = string))
                a = a + 1
                b = b + a
        if page == 1:
            amount_plus = InlineKeyboardButton(text = '–í–ø–µ—Ä—ë–¥ -->', callback_data = '+1')
            maxpage = InlineKeyboardButton(text = '–ö–æ–Ω–µ—Ü', callback_data='maxpage')
            markup.add (maxpage, amount_plus, row_width = 4)
            markup.add(back)
            try:
                bot.edit_message_text(chat_id=message.chat.id, message_id=message.id, text = f'**–°–ø–∏—Å–æ–∫ {page}**', parse_mode='markdown', reply_markup = markup)
            except:
                bot.send_message (message.chat.id, text = f'**–°–ø–∏—Å–æ–∫ {page}**', parse_mode='markdown', reply_markup = markup)

        elif a < 10:
            amount_minus = InlineKeyboardButton(text = '<-- –ù–∞–∑–∞–¥', callback_data = '-1')
            start = InlineKeyboardButton(text = '–ù–∞—á–∞–ª–æ', callback_data='minpage')
            maxpage = InlineKeyboardButton(text = '–ö–æ–Ω–µ—Ü', callback_data='maxpage')
            markup.add(amount_minus, start,maxpage, row_width = 4)
            markup.add(back)
            try:
                bot.edit_message_text(chat_id=message.chat.id, message_id=message.id, text = f'**–°–ø–∏—Å–æ–∫ {page}**', parse_mode='markdown', reply_markup = markup)
            except:
                bot.send_message(message.chat.id, text = f'**–°–ø–∏—Å–æ–∫ {page}**', parse_mode='markdown', reply_markup = markup)
        else:
            amount_minus = InlineKeyboardButton(text = '<-- –ù–∞–∑–∞–¥', callback_data = '-1')
            amount_plus = InlineKeyboardButton(text = '–í–ø–µ—Ä—ë–¥ -->', callback_data = '+1')
            start = InlineKeyboardButton(text = '–ù–∞—á–∞–ª–æ', callback_data='minpage')
            maxpage = InlineKeyboardButton(text = '–ö–æ–Ω–µ—Ü', callback_data='maxpage')
            markup.add (amount_minus, start, maxpage, amount_plus, row_width = 4)
            markup.add(back)
            try:
                bot.edit_message_text(chat_id=message.chat.id, message_id=message.id, text = f'**–°–ø–∏—Å–æ–∫ {page}**', parse_mode='markdown', reply_markup = markup)
            except:
                bot.send_message(message.chat.id, text = f'**–°–ø–∏—Å–æ–∫ {page}**', parse_mode='markdown', reply_markup = markup)

# callback
def mycallback(bot, callback):
    TIME = (dt.datetime.now(tz)).strftime('%H:%M:%S')
    #–ü–û–õ–£–ß–ï–ù–ò–ï –î–ù–ï–ô –ù–ê –ö–û–¢–û–†–´–ï –ï–°–¢–¨ –†–ê–°–ü–ò–°–ê–ù–ò–ï
    site = requests.get(f'https://erp.nttek.ru/api/schedule/legacy').text
    sitedate = json.loads(site)
    sitedate.sort(key=lambda x: time.mktime(time.strptime(x,"%d.%m.%Y")))
    if (len(sitedate)) <= 5:
        a = 0
    else:
        a = ((len(sitedate)) - 5)

        #–í–´–í–û–î –û–ü–†–ï–î–ï–õ–Å–ù–ù–û–ô –ì–†–£–ü–ü–´ (–î–ù–ï–ô)

    #–ì–†–£–ü–ü–´
    if callback.data == 'üìã–†–∞—Å–ø–∏—Å–∞–Ω–∏–µüìã':
        group(bot, callback)

    elif callback.data == 'print':
        print('–¢—ã 4–º–æ')

# #–ó–í–û–ù–ö–ò
    elif callback.data == 'bells':
        photo = open('data/photo.jpg', 'rb')
        markup_inline = InlineKeyboardMarkup()
        url1 = InlineKeyboardButton (text = 'üìÖ–ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µüìÖ', url=f'https://a.nttek.ru')
        back = InlineKeyboardButton(text = 'üîô–ù–∞–∑–∞–¥', callback_data = 'close2')
        markup_inline.add(url1, back)
        bot.send_photo(callback.message.chat.id, photo, reply_markup=markup_inline)
        

#–ü–†–ï–ü–û–î–´
    elif callback.data == "üë•–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏üë•":
        f = open('data/Prepod.txt', 'r', encoding='UTF-8')
        thinks = f.read()
        f.close()
        markup_inline = InlineKeyboardMarkup()
        markup_inline.add(InlineKeyboardButton(text = 'üîô–ù–∞–∑–∞–¥', callback_data = 'close'))
        TIME = (dt.datetime.now(tz)).strftime('%H:%M:%S')
        DATE = (dt.datetime.now(tz)).strftime('%d.%m')
        print(f'{TIME} {DATE}| –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} {callback.from_user.first_name} —É–∑–Ω–∞–ª –ø—Ä–µ–ø–æ–¥–æ–≤!')
        with open("data/logs.txt", "a+", encoding="utf-8") as f:
            f.write(f'\n{TIME} {DATE}| –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} {callback.from_user.first_name} —É–∑–Ω–∞–ª –ø—Ä–µ–ø–æ–¥–æ–≤!')
        try:
            bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id, text = thinks, parse_mode='html', reply_markup=markup_inline)
        except:
            bot.send_message(callback.message.chat.id, thinks, parse_mode='html', reply_markup=markup_inline)
            

#üõ†–ù–∞—Å—Ç—Ä–æ–π–∫–∏üõ†
    elif callback.data == "üõ†–ù–∞—Å—Ç—Ä–æ–π–∫–∏üõ†":
        markup = InlineKeyboardMarkup()
        url1 = InlineKeyboardButton (text = 'üîî–í–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data = 'n_YES')
        url2 = InlineKeyboardButton (text = 'üîï–í—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data = 'n_NO')
        url3 = InlineKeyboardButton (text = 'üëØ–î–æ–±–∞–≤–∏—Ç—å –º–æ—é –≥—Ä—É–ø–ø—É', callback_data = 'add_f_group')
        back = InlineKeyboardButton (text = 'üîô–ù–∞–∑–∞–¥', callback_data = 'close')
        markup.add(url1,url2)
        markup.add(url3)
        markup.add(back)
        try:
            bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id, text = "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–≤–æ–µ–≥–æ –∂–µ–ª–∞–Ω–∏—è!", parse_mode='html', reply_markup=markup)
        except:
            bot.send_message(callback.message.chat.id, "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–≤–æ–µ–≥–æ –∂–µ–ª–∞–Ω–∏—è!", parse_mode='html', reply_markup=markup)

    #–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨
    elif callback.data == 'Admin panel':
        markup = InlineKeyboardMarkup()
        item1 = InlineKeyboardButton(text = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data = 'users')
        item2 = InlineKeyboardButton(text = '–õ–æ–≥–∏', callback_data = 'logs')
        item3 = InlineKeyboardButton(text = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data = 'send_message')
        back = InlineKeyboardButton(text = 'üîô–ù–∞–∑–∞–¥', callback_data = 'close')
        markup.add(item1, item2, item3, back)
        try:
            bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id, text = '–í—ã–±–µ—Ä–∏ —á—Ç–æ-—Ç–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ: ', parse_mode = 'html', reply_markup = markup)
        except:
            bot.send_message(callback.message.chat.id, '–í—ã–±–µ—Ä–∏ —á—Ç–æ-—Ç–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ: ', parse_mode = 'html', reply_markup = markup)


    elif callback.data == 'ü•∏OpenAIü•∏':
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data = 'close'))
        try:
            bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id, text = '–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å!', reply_markup=keyboard)
        except:
            bot.send_message(callback.message.chat.id, text = '–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å!', reply_markup=keyboard)
        def openai_send(message):
            send_openai(message.text, bot, callback, InlineKeyboardMarkup, InlineKeyboardButton)
            bot.delete_message(message.chat.id, message.message_id)
        bot.register_next_step_handler(callback.message, openai_send)

#–û –ë–û–¢–ï
    elif callback.data == 'üìí–û –±–æ—Ç–µüìí':
        f = open('data/About bot.txt', 'r', encoding='UTF-8')
        facts = f.read()
        markup_inline = InlineKeyboardMarkup()
        url1 = InlineKeyboardButton (text = 'üôçüèª‚Äç‚ôÇÔ∏è–í–∫', url='https://vk.com/mem445')
        url2 = InlineKeyboardButton (text = 'üíå–û—Ç–∑—ã–≤', callback_data= 'review')
        url3 = InlineKeyboardButton (text = 'üí∏–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–≤—Ç–æ—Ä–∞', url='https://www.donationalerts.com/r/kinoki445', callback_data = 'print')
        back = InlineKeyboardButton(text = 'üîô–ù–∞–∑–∞–¥', callback_data = 'close')
        markup_inline.add(url1,url2)
        markup_inline.add(url3)
        markup_inline.add(back)
        TIME = (dt.datetime.now(tz)).strftime('%H:%M:%S')
        DATE = (dt.datetime.now(tz)).strftime('%d.%m')
        print(f'{TIME} {DATE}| –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} {callback.from_user.first_name} —É–∑–Ω–∞–ª –æ –±–æ—Ç–µ!')
        with open("data/logs.txt", "a+", encoding="utf-8") as f:
            f.write(f'\n{TIME} {DATE}| –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} {callback.from_user.first_name} —É–∑–Ω–∞–ª –æ –±–æ—Ç–µ')

        try:
            bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id, text = facts, parse_mode='html', reply_markup=markup_inline)
        except:
            bot.send_message(callback.message.chat.id, facts, parse_mode='html', reply_markup=markup_inline)
        f.close()

    elif callback.data == 'f_group':
        try:
            bot.clear_step_handler_by_chat_id(chat_id=callback.message.chat.id)
        except:
            pass
        cursor.execute(f'SELECT f_group FROM users WHERE user_id = {callback.message.chat.id}')
        data = cursor.fetchone()
        try:
            if data[0] is None:
                bot.send_message(callback.message.chat.id, '–£ —Ç–µ–±—è –Ω–µ—Ç—É —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã, –¥–æ–±–∞–≤—å –µ—ë –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, –µ—Å–ª–∏ –Ω–µ—Ç—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–ø–∏—à–∏ menu', parse_mode='html')
            else:
                parimiy(InlineKeyboardMarkup, InlineKeyboardButton, bot, callback, 'group', f'{data[0]}')
        except Exception as e:
            print(e)
            bot.send_message(callback.message.chat.id, '–ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –ø–∏—à–∏ @Kinoki445', parse_mode='html')
    
    elif callback.data == 'another_group':
        try:
            bot.clear_step_handler_by_chat_id(chat_id=callback.message.chat.id)
        except:
            pass
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data = 'close2'))
        bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id, text = '–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã, –ø—Ä–∏–º–µ—Ä (2–ò–°6) –ë–µ–∑ - –∏ –ø—Ä–æ–±–µ–ª–æ–≤: ', reply_markup = keyboard)
        def another_group(message):
            try:
                parimiy(InlineKeyboardMarkup, InlineKeyboardButton, bot, callback, 'group', message.text.upper())
                bot.delete_message(message.chat.id, message.message_id)
            except Exception as e:
                bot.send_message(chat_id = 510441193, text = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} {message.from_user.first_name} –≤–≤—ë–ª –Ω–µ–≤–µ—Ä–Ω–æ –≥—Ä—É–ø–ø—É {message.text}')
                bot.send_message(callback.message.chat.id, f'–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', parse_mode='html')
        bot.register_next_step_handler(callback.message, another_group)

    elif callback.data == 'teacher':
        try:
            bot.clear_step_handler_by_chat_id(chat_id=callback.message.chat.id)
        except:
            pass
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data = 'close2'))
        bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id, text = '–í–≤–µ–¥–∏ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –ø—Ä–∏–º–µ—Ä (–ó—è—Ç–∏–∫–æ–≤–∞ –¢–Æ) –ë–µ–∑ - –∏  —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: ', reply_markup = keyboard)
        def another_teacher(message):
            try:
                parimiy(InlineKeyboardMarkup, InlineKeyboardButton, bot, callback, 'teacher', message.text)
                bot.delete_message(message.chat.id, message.message_id)
            except Exception as e:
                bot.send_message(chat_id = 510441193, text = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} {message.from_user.first_name} –≤–≤—ë–ª –Ω–µ–≤–µ—Ä–Ω–æ –≥—Ä—É–ø–ø—É {message.text}')
                bot.send_message(callback.message.chat.id, f'–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', parse_mode='html')
        bot.register_next_step_handler(callback.message, another_teacher)
        
    elif callback.data =='excel':
        parimiy(InlineKeyboardMarkup, InlineKeyboardButton, bot, callback, 'excel', 'excel')

    elif callback.data == 'close2':
        try:
            bot.clear_step_handler_by_chat_id(chat_id=callback.message.chat.id)
        except:
            pass
        group(bot, callback)

    for i in range(a, len(sitedate)):
        if callback.data[0:6:] != '–ø—Ä–µ–ø–æ–¥':
            if callback.data[0:10:] == f'{sitedate[i]}':
                getpari(callback.data[0:10:], 'group', callback.data[11::], InlineKeyboardMarkup, InlineKeyboardButton, bot, callback)
                TIME = (dt.datetime.now(tz)).strftime('%H:%M:%S')
                DATE = (dt.datetime.now(tz)).strftime('%d.%m')
                print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.message.chat.username} {callback.message.chat.first_name} –∑–∞–ø—Ä–æ—Å–∏–ª {callback.data[11::]}! –í', TIME)
                try:
                    with open("data/logs.txt", "a+", encoding="utf-8") as f:
                        f.write(f'\n{TIME} {DATE}| –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.message.chat.username} {callback.message.chat.first_name} –∑–∞–ø—Ä–æ—Å–∏–ª {callback.data[11::]}!')
                except:
                        pass
                
            elif callback.data[2:12:] == f'{sitedate[i]}':
                TIME = (dt.datetime.now(tz)).strftime('%H:%M:%S')
                DATE = (dt.datetime.now(tz)).strftime('%d.%m')
                print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.message.chat.username} {callback.message.chat.first_name} –∑–∞–ø—Ä–æ—Å–∏–ª {callback.data[16:-2:]}! –í', TIME)
                try:
                    with open("data/logs.txt", "a+", encoding="utf-8") as f:
                        f.write(f'\n{TIME} {DATE}| –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.message.chat.username} {callback.message.chat.first_name} –∑–∞–ø—Ä–æ—Å–∏–ª {callback.data[16:-2:]}!')
                except:
                    pass
                getpari(callback.data[2:12:], 'group', callback.data[16:-2:], InlineKeyboardMarkup, InlineKeyboardButton, bot, callback)

            elif callback.data[0:18:] == f"excel {sitedate[i]}":
                getpari(callback.data[6:18:], 'excel', sitedate[i], InlineKeyboardMarkup, InlineKeyboardButton, bot, callback)
                TIME = (dt.datetime.now(tz)).strftime('%H:%M:%S')
                DATE = (dt.datetime.now(tz)).strftime('%d.%m')
                print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.message.chat.username} {callback.message.chat.first_name} –∑–∞–ø—Ä–æ—Å–∏–ª excel {sitedate[i]}! –í', TIME)
                try:
                    with open("data/logs.txt", "a+", encoding="utf-8") as f:
                        f.write(f'\n{TIME} {DATE}| –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.message.chat.username} {callback.message.chat.first_name} –∑–∞–ø—Ä–æ—Å–∏–ª excel {sitedate[i]}!')
                except:
                        pass
        
        elif callback.data[0:18:] == f"–ø—Ä–µ–ø–æ–¥('{sitedate[i]}":
            getpari(callback.data[8:18:], 'teacher', callback.data[22:-2:], InlineKeyboardMarkup, InlineKeyboardButton, bot, callback)
            TIME = (dt.datetime.now(tz)).strftime('%H:%M:%S')
            DATE = (dt.datetime.now(tz)).strftime('%d.%m')
            print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.message.chat.username} {callback.message.chat.first_name} –∑–∞–ø—Ä–æ—Å–∏–ª {callback.data[22:-2:]}! –í', TIME)
            try:
                with open("data/logs.txt", "a+", encoding="utf-8") as f:
                    f.write(f'\n{TIME} {DATE}| –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.message.chat.username} {callback.message.chat.first_name} –∑–∞–ø—Ä–æ—Å–∏–ª {callback.data[22:-2:]}!')
            except:
                pass

    if callback.data == 'add_f_group':
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data = 'close'))
        bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id, text = '–í–≤–µ–¥–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: "2–ò–°6" –±–µ–∑ " - –∏ —Ç.–ø ', reply_markup=keyboard)
        def add_user_ban(message):
            try:
                cursor.execute(f'''UPDATE users SET f_group = '{message.text}' WHERE user_id = {callback.message.chat.id}''')
                database.commit()
                bot.send_message(callback.message.chat.id, '–Ø —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª —Ç–≤–æ—é –≥—Ä—É–ø–ø—É!', parse_mode='html')
                menu(bot, callback.message)
            except:
                bot.send_message(callback.message.chat.id, '–ü–æ—è–≤–∏–ª–∞—Å—å –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Å—å –∫ @kinoki445', parse_mode='html')
                menu(bot, callback.message)
        bot.register_next_step_handler(callback.message, add_user_ban)

    elif callback.data == 'review':
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data = 'close'))
        try:
            bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id, text = '–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–∑—ã–≤: ', reply_markup=keyboard)
        except:
            bot.send_message(callback.message.chat.id, '–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–∑—ã–≤: ', reply_markup=keyboard)
        def review(message):
            try:
                cursor.execute(f'''UPDATE users SET review = '{message.text}' WHERE user_id = {callback.message.chat.id}''')
                database.commit()
                bot.send_message(callback.message.chat.id, '–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ —Ç–≤–æ—ë –º–Ω–µ–Ω–∏–µ –æ –±–æ—Ç–µ)', parse_mode='html')
                bot.send_message(chat_id = 510441193, text = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.message.chat.username} {callback.message.chat.first_name} –Ω–∞–ø–∏—Å–∞–ª –æ—Ç–∑—ã–≤: \n{message.text}')
                menu(bot, callback.message)
            except:
                bot.send_message(callback.message.chat.id, '–ü–æ—è–≤–∏–ª–∞—Å—å –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Å—å –∫ @kinoki445', parse_mode='html')
                menu(bot, callback.message)
        bot.register_next_step_handler(callback.message, review)

    elif callback.data == 'n_YES':
        try:
            cursor.execute(f'UPDATE users SET notice = {1} WHERE user_id = {callback.message.chat.id}')
            database.commit()
            bot.send_message(callback.message.chat.id, '–¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –º–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è :)', parse_mode='html')
            menu(bot, callback.message)
        except:
            bot.send_message(callback.message.chat.id, '–ü–æ—è–≤–∏–ª–∞—Å—å –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Å—å –∫ @kinoki445', parse_mode='html')
            menu(bot, callback.message)

    elif callback.data == 'n_NO':
        try:
            cursor.execute(f'UPDATE users SET notice = {0} WHERE user_id = {callback.message.chat.id}')
            database.commit()
            bot.send_message(callback.message.chat.id, '–¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –º–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è :)', parse_mode='html')
            menu(bot, callback.message)
        except:
            bot.send_message(callback.message.chat.id, '–ü–æ—è–≤–∏–ª–∞—Å—å –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Å—å –∫ @kinoki445', parse_mode='html')
            menu(bot, callback.message)

    elif callback.data == 'logs':
        markup_inline = InlineKeyboardMarkup()
        url1 = InlineKeyboardButton (text = '–õ–æ–≥–∏', callback_data='logs_choice')
        url2 = InlineKeyboardButton (text = '–§–∞–π–ª', callback_data='log_file')
        back = InlineKeyboardButton(text = 'üîô–ù–∞–∑–∞–¥', callback_data = 'close')
        markup_inline.add(url1,url2,back)
        try:
            bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id, text = '–ß—Ç–æ —Ö–æ—á–µ—à—å?', parse_mode='html', reply_markup=markup_inline)
        except:
            bot.send_message(callback.message.chat.id, '–ß—Ç–æ —Ö–æ—á–µ—à—å?', parse_mode='html', reply_markup=markup_inline)

    elif callback.data == 'logs_choice':
        markup = InlineKeyboardMarkup()
        back = InlineKeyboardButton(text = 'üîô–ù–∞–∑–∞–¥', callback_data = 'close')
        markup.add(back)
        bot.reply_to(callback.message, f'–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫', reply_markup=markup)
        def logs_choice(message):
            f1 = open("data/logs.txt", "r")
            a = f1.readlines()[-(int(message.text)):]
            text = ''
            for i in a:
                text = (text + i)
            print(text)
            bot.send_message(callback.message.chat.id, f'{text}')
            f1.close()
        bot.register_next_step_handler(callback.message, logs_choice)

    elif callback.data == 'log_file':
        markup = InlineKeyboardMarkup()
        back = InlineKeyboardButton(text = 'üîô–ù–∞–∑–∞–¥', callback_data = 'close')
        markup.add(back)
        f = open("data/logs.txt","rb")
        bot.send_document(callback.message.chat.id,f,reply_markup=markup)
        f.close()

    elif callback.data == 'send_message':
        cursor.execute('''SELECT user_id FROM admin WHERE user_id = ?''', (callback.message.chat.id, ))
        admin = cursor.fetchone()
        if admin is None:
            bot.send_message(callback.message.chat.id, text = '–£ —Ç–µ–±—è –Ω–µ—Ç—É –ø—Ä–∞–≤', parse_mode='html')
            menu(bot, callback.message)
        else:
            markup = InlineKeyboardMarkup()
            back = InlineKeyboardButton(text = 'üîô–ù–∞–∑–∞–¥', callback_data = 'close')
            markup.add(back)
            bot.reply_to(callback.message, '–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å?', reply_markup = markup)
            def send(message, count = 0):
                cursor.execute(f'SELECT user_id FROM users WHERE notice = {1}')
                lol = cursor.fetchall()
                count = 0
                while count != len(lol):
                        for row in lol:
                            try:
                                bot.forward_message(row[0], message.chat.id, message.id)
                                count += 1
                            except:
                                count += 1
                menu(bot, message)
            bot.register_next_step_handler(callback.message, send)

    elif callback.data == 'users':
        defuser(bot, callback.message, InlineKeyboardMarkup, InlineKeyboardButton)

    elif callback.data == 'close':
        try:
            bot.clear_step_handler_by_chat_id(chat_id=callback.message.chat.id)
        except:
            pass
        menu(bot, callback.message)

    elif callback.data == '+1':
        global page 
        page += 1
        defuser(bot, callback.message, InlineKeyboardMarkup, InlineKeyboardButton)

    elif callback.data == '-1':
        page -= 1
        defuser(bot, callback.message, InlineKeyboardMarkup, InlineKeyboardButton)

    elif callback.data == 'maxpage':
        cursor.execute('''SELECT * FROM users''')
        user = cursor.fetchall()
        page = len(user) // 10
        defuser(bot, callback.message, InlineKeyboardMarkup, InlineKeyboardButton)
    
    elif callback.data == 'minpage':
        page = 1
        defuser(bot, callback.message, InlineKeyboardMarkup, InlineKeyboardButton)

    try:      
        cursor.execute('''SELECT * FROM users''')
        user = cursor.fetchall()
        for i in user:
            if callback.data == i[3]:
                bot.send_message(callback.message.chat.id, text = 
                (
                f'–ù–æ–º–µ—Ä: {str(i[0])}\n'
                f'–ò–º—è: {str(i[2])}\n'
                f'id: {str(i[1])}\n'
                f'Nickname: {str(i[3])}\n'
                f'–û—Ç–∑—ã–≤: {str(i[5])}\n'
                f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {str(i[4])}\n'
                f'Group: {str(i[6])}\n'
                f'Regist: {str(i[7])}\n'
                ))
                bot.answer_callback_query(callback_query_id=callback.id, show_alert=False)

            elif callback.data == str(i[2]):
                bot.send_message(callback.message.chat.id, text = 
                (
                f'–ù–æ–º–µ—Ä: {str(i[0])}\n'
                f'–ò–º—è: {str(i[2])}\n'
                f'id: {str(i[1])}\n'
                f'Nickname: {str(i[3])}\n'
                f'–û—Ç–∑—ã–≤: {str(i[5])}\n'
                f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {str(i[4])}\n'
                f'Group: {str(i[6])}\n'
                f'Regist: {str(i[7])}\n'
                ))
                bot.answer_callback_query(callback_query_id=callback.id, show_alert=False)
    except:
        bot.answer_callback_query(callback_query_id=callback.id, show_alert=False)